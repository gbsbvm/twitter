# -*- coding: utf-8 -*-
"""
this Module is in charge for bridging the data from the process to the Postgres Database ;
the class Postgres_inserter relies on a previously set environment in order to work 

Created on Mon Jan 12 14:02:48 2015

@author: gbsb
"""
import sys
from traceback import format_exc
import uuid
from utils import id_maker
import csv

class Postgres_inserter(object):
    '''a collection of methods in charge of any data insertion into our posgresql database'''

    def drop_schema(self,*args,**kwargs):
        '''dangerous method, it deletes the whole schema; careful'''
        try:
            self.db_cursor.execute("DROP SCHEMA IF EXISTS {} CASCADE".format(self.schema))
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()    

    def control_table_inserter(self,*args,**kwargs):      
        '''this method is in charge of filling the control table; 
        if a node is explicitly provided as argument, it will be a inserted;
        if no argument is provided, the method will first find nodes to insert
        calling the method self.stored_tweets_nodes_finder that will return 
        a list of nodes that have been found during the nodes_hunt;
        this method is generally called by followers_followers_hunt (providing a node as argument);
        without argument it can be called by edges_hunt before looking for edges or by 
        nodes_hunt after having looked for nodes'''
        try: 
            if args:
                node=args[0]
                self.db_cursor.execute("""INSERT INTO {0} 
                    (ID, Screen_Name, Followers_count)
                    SELECT {1}, '{2}', {3}
                    WHERE NOT EXISTS 
                    (SELECT ID FROM {0} WHERE ID={1})
                    """.format(self.control_table,
                               node[0],node[1],node[2]))
                if hasattr(self,'_verbose'):self.logger.info("Control_table_inserter inserted: "+node[1])                      

            else:     
                tweet_nodes=self.stored_tweets_nodes_finder()
                if tweet_nodes:
                    for node in tweet_nodes:
                        self.db_cursor.execute("""INSERT INTO {0} 
                            (ID, Screen_Name, Followers_count)
                            SELECT {1}, '{2}', {3}
                            WHERE NOT EXISTS 
                            (SELECT ID FROM {0} WHERE ID={1})
                            """.format(self.control_table,
                                       node[0],node[1],node[2]))
                        if hasattr(self,'_verbose'):self.logger.info("Control_table_inserter inserted: "+node[1])                 
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

    def control_table_updater(self,*args,**kwargs):
        '''method used within the edges_hunt where control table needs to be updated 
        in order to coordinate the different processes/threads;
        each thread/process adds/updates state information on the specific control table's row
        that is currently processed, being each row a targeted user or an user to be targeted'''
        try:
            id_target=args[0]
            state=args[1]
            if state=='start':
                self.db_cursor.execute("""UPDATE {0} 
                                        SET thread_name='{2}',start=DATE_TRUNC('second',(now() at time zone 'utc'))  
                                        WHERE id={1}""".format(self.control_table,id_target,self.server_name+'_'+self.hunter_name))                                        
            else:
                if state=='404_Error':
                    attr_extra='404 Error: the user does not exist anymore'
                elif state=='401_Error':
                    attr_extra='401 Error: protected profile'                
                elif state=='finish':
                    attr_extra=None                                   
                else:
                    self.logger.error('control_table_updater did not receive a proper args[1]...WTF??')
                    self.disconnector()                    
                self.db_cursor.execute("""UPDATE {0} 
                        SET thread_name='{2}',finish=DATE_TRUNC('second',(now() at time zone 'utc')),attr_extra_1='{3}'  
                        WHERE id={1}""".format(self.control_table,id_target,self.server_name+'_'+self.hunter_name,attr_extra))
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()
    def edge_inserter(self,*args,**kwargs):
        '''this method inserts an edge into the edges table; 
        it needs an edge source and an edge target as arguments;
        an edge con have been generated by tweets, retweeters or followers hunt, 
        in the latter case the edge also carries the tweet id and the search terms 
        that are on the base of its generation; it also assign a footprint indicating
        if the edge has been originated by a nodes_hunt or an edges_hunt'''
        try:
            source=args[0]
            target=args[1]
            if len(args)>2:                
                tweet_id=args[2]
                search_terms=args[3]
                tweet_footprint='Y'
                follower_footprint='N'
            else:
                tweet_id=0
                search_terms='N/A'
                tweet_footprint='N'
                follower_footprint='Y'

            self.db_cursor.execute("""INSERT INTO {0} (uuid,Source, Target, Tweet_ID, Search_terms, Tweets_hunter, Followers_hunter) 
            SELECT '{1}',{2},{3},{4},'{5}','{6}','{7}'
            WHERE NOT EXISTS (SELECT source,target Tweet_ID FROM {0} 
            WHERE source ={2} AND target = {3} AND Tweet_ID ={4} AND search_terms='{5}')""".format(self.edges_table,
                                                                str(uuid.uuid1()),
                                                                source,
                                                                target,
                                                                tweet_id,
                                                                search_terms,
                                                                tweet_footprint,
                                                                follower_footprint,                                                               
                                                                ))
            if hasattr(self,'_verbose'):self.logger.info("edge_inserter: "+str(source)+' '+str(target))                 
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

    def node_inserter(self,*args,**kwargs):
        '''this method inserts single node into a nodes table; it needs a node as argument;
        the argument can be provided as tuple or as object with attributes; 
        the former case is tipical for when the data has been retrieved from the database,
        the latter when the data has been retrieved straight from the twitter api;
        if the node is already present in the nodes table, the node will be updated instead of being inserted
        moreover, this function also properly formats the node attributes and 
        it also assign a footprint indicating if the edge has been originated 
        by a nodes_hunt or an edges_hunt'''
        try:
            if args:
                user=args[0]
                if isinstance(user,tuple):
                #it adapts a tuple received by 
                    class Objectmaker(object):
                        def __init__(self, **kwargs):
                            self.__dict__.update(kwargs)
                    for attr in user:
                        if attr==None:
                            attr='N/A'
                    adapted_user=Objectmaker(id= user[0],screen_name=user[1],name=user[2].decode('utf-8'),created_at=user[3],description=user[4].decode('utf-8'),
                          statuses_count=user[5],followers_count=user[6],friends_count=user[7],listed_count=user[8],lang=user[9].decode('utf-8'),
                          location=user[10].decode('utf-8'),url=user[11].decode('utf-8'),profile_image_url=user[12].decode('utf-8'),profile_background_image_url=user[13].decode('utf-8'),
                          geo_enabled=user[14],protected=user[15],verified=user[16])
                    user=adapted_user
    #            print(dir(user))#for debugging
                if hasattr(self,'stored_nodes_ids'):
                    if user.id in self.stored_nodes_ids:
                        self.node_updater(user)                
                    else:          
                        user.name=(user.name).replace("'","`")#.replace("ï¿½","")
                        user.description=(user.description).replace("'","`")
                        user.location=(user.location).replace("'","`")            
                        if not user.name: user.name='N/A'
                        if not user.description: user.description ='N/A'
                        if not user.location: user.location ='N/A'
                        if not user.url: user.url ='N/A'
                        tokenized_description=user.description.replace(' ',';')
                        tweet_footprint='N'
                        follower_footprint='N'           
                        if self.__name__=='tweets_hunt' or self.__name__=='retweeters_hunt':
                            tweet_footprint='Y'
                        elif self.__name__=='followers_id_hunt'or self.__name__=='followers_list_hunt':
                            follower_footprint='Y'
                        else:
                            self.logger.error('Node_inserter did not find a proper self.__name__')
                            self.disconnector()
                        
                        if len(args)>1:
                            search_terms=args[1]
                        else:
                            search_terms='N/A'
                                
                        self.db_cursor.execute("""INSERT INTO {0} 
                                        (ID ,Screen_Name , Name , Created_at , Description, tokenized_description,
                                         Tweets_count, Followers_count,Friends_count, Listed_count, 
                                         Profile_Language, Location,
                                         personal_homepage,profile_image_url,profile_background_image_url,
                                         Geo_enabled, Protected, Verified, Tweets_hunter, Followers_hunter, search_terms) 
                                         SELECT {1}, '{2}', '{3}', '{4}', '{5}', '{6}',{7}, {8}, {9}, {10}, '{11}', '{12}', '{13}', '{14}', '{15}', '{16}', '{17}', '{18}','{19}','{20}','{21}'                                       
                                         WHERE NOT EXISTS 
                                         (SELECT ID FROM {0} WHERE ID='{1}')""".format(self.nodes_table,
                                                                                        user.id,
                                                                                        user.screen_name,
                                                                                        (user.name).encode('utf-8'),
                                                                                        user.created_at,
                                                                                        (user.description).encode('utf-8'),
                                                                                        (tokenized_description).encode('utf-8'),
                                                                                        user.statuses_count,
                                                                                        user.followers_count,
                                                                                        user.friends_count,
                                                                                        user.listed_count,
                                                                                        (user.lang).encode('utf-8'),
                                                                                        (user.location).encode('utf-8'),
                                                                                        (user.url).encode('utf-8'),
                                                                                        (user.profile_image_url).encode('utf-8'),
                                                                                        (user.profile_background_image_url).encode('utf-8'),
                                                                                        user.geo_enabled,
                                                                                        user.protected,            
                                                                                        user.verified,
                                                                                        tweet_footprint,
                                                                                        follower_footprint,
                                                                                        search_terms,
                                                                                        ))
                        self.stored_nodes_ids.add(user.id)
                        if hasattr(self,'_verbose'):self.logger.info( "node inserted: "+str(user.screen_name)+"; total nodes stored:"+str(len(self.stored_nodes_ids)))
                else:
                    self.logger.error( "Node found but not a self.stored_nodes_ids")
                    self.disconnector()  
                    
            else:
                self.logger.error('Node_inserter has been called but no user has been provided... WTF??')
        except Exception: 
            self.logger.error(format_exc())

            self.disconnector()
    def node_updater(self,*args,**kwargs):       
        '''this method updates a single node in a nodes table; it needs a node as argument;
        the argument can be provided as tuple or as object with attributes, with the former case 
        not supposed to happen, but hereby kept for future compatibility's sake;        
        this method is generally called from the nodes_inserter if the node is already 
        present in the nodes table the node attributes that could have been alterated
        in the time are updated'''
        try:
            if args:
                user=args[0]
                if isinstance(user,tuple):
                #frankly useless on this stage but kept for eventual future compatibility need
                    class Objectmaker(object):
                        def __init__(self, **kwargs):
                            self.__dict__.update(kwargs)                    
                    adapted_user=Objectmaker(id= user[0],screen_name=user[1],name=user[2].decode('utf-8'),created_at=user[3],description=user[4].decode('utf-8'),
                          statuses_count=user[5],followers_count=user[6],friends_count=user[7],listed_count=user[8],lang=user[9].decode('utf-8'),
                          location=user[10].decode('utf-8'),url=user[11].decode('utf-8'),profile_image_url=user[12].decode('utf-8'),profile_background_image_url=user[13].decode('utf-8'),
                          geo_enabled=user[14],protected=user[15],verified=user[16])
                    user=adapted_user

                user.name=(user.name).replace("'","`")
                user.description=(user.description).replace("'","`")
                user.location=(user.location).replace("'","`")
                if not user.description: user.description ='N/A'
                if not user.location: user.location ='N/A'
                if not user.url: user.url ='N/A'
                tokenized_description=user.description.replace(' ',';')

                if self.__name__=='tweets_hunt' or self.__name__=='retweeters_hunt':
                    tweet_footprint='Y'
                    self.db_cursor.execute("""UPDATE {0} 
                                     SET ID={1} ,Screen_Name='{2}', Name='{3}', Created_at='{4}', Description='{5}', tokenized_description='{6}',
                                     Tweets_count={7}, Followers_count={8},Friends_count={9}, Listed_count={10}, 
                                     Profile_Language='{11}', Location='{12}',
                                     personal_homepage='{13}',profile_image_url='{14}',profile_background_image_url='{15}',
                                     Geo_enabled='{16}', Protected='{17}', Verified='{18}', Tweets_hunter='{19}'
                                     WHERE ID={1}""".format(self.nodes_table,
                                                            user.id,
                                                            user.screen_name,
                                                            (user.name).encode('utf-8'),
                                                            user.created_at,
                                                            (user.description).encode('utf-8'),
                                                            (tokenized_description).encode('utf-8'),
                                                            user.statuses_count,
                                                            user.followers_count,
                                                            user.friends_count,
                                                            user.listed_count,
                                                            (user.lang).encode('utf-8'),
                                                            (user.location).encode('utf-8'),
                                                            (user.url).encode('utf-8'),
                                                            (user.profile_image_url).encode('utf-8'),
                                                            (user.profile_background_image_url).encode('utf-8'),
                                                            user.geo_enabled,
                                                            user.protected,            
                                                            user.verified,
                                                            tweet_footprint
                                                            ))                                        
                elif self.__name__=='followers_id_hunt' or self.__name__=='followers_list_hunt':
                    
                    follower_footprint='Y'
                    self.db_cursor.execute("""UPDATE {0} 
                                 SET ID={1} ,Screen_Name='{2}', Name='{3}', Created_at='{4}', Description='{5}', tokenized_description='{6}',
                                 Tweets_count={7}, Followers_count={8},Friends_count={9}, Listed_count={10}, 
                                 Profile_Language='{11}', Location='{12}',
                                 personal_homepage='{13}',profile_image_url='{14}',profile_background_image_url='{15}',
                                 Geo_enabled='{16}', Protected='{17}', Verified='{18}', Followers_hunter='{19}'
                                 WHERE ID={1}""".format(self.nodes_table,
                                                        user.id,
                                                        user.screen_name,
                                                        (user.name).encode('utf-8'),
                                                        user.created_at,
                                                        (user.description).encode('utf-8'),
                                                        (tokenized_description).encode('utf-8'),
                                                        user.statuses_count,
                                                        user.followers_count,
                                                        user.friends_count,
                                                        user.listed_count,
                                                        (user.lang).encode('utf-8'),
                                                        (user.location).encode('utf-8'),
                                                        (user.url).encode('utf-8'),
                                                        (user.profile_image_url).encode('utf-8'),
                                                        (user.profile_background_image_url).encode('utf-8'),
                                                        user.geo_enabled,
                                                        user.protected,            
                                                        user.verified,
                                                        follower_footprint,
                                                        ))                                                                        
                else:
                    self.logger.error('Node_updater did not find a proper self.__name__')
                    self.disconnector()

                if hasattr(self,'_verbose'):self.logger.info( 'node updated: '+str(user.screen_name))
            else:
                self.logger.error('node_updater has been called but no user has been provided... WTF??')
                
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

    def retweeters_inserter(self,*args,**kwargs):
        '''this method updates a column in the tweets table inserting the names of the twitter users
        that have retweeted/reposted that specific tweet; unfortunately for each tweet
        it possible to retrieve up to only 100 "retweeters"'''
        try:
            tweet_id=args[0]
            retweetters=args[1]
            retweetters=';'.join(retweetters)
            self.db_cursor.execute("""UPDATE {0} 
                set retweeters='{2}'
                    WHERE Tweet_ID={1}
                    """.format(self.tweets_table,
                           tweet_id,
                           retweetters,
                           )) 
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()
            
    def sentiment_table_importer(self,*args,**kwargs):
        '''this method is generally called by sentimentalizer during the sentiment analysis; 
        it needs a csv file as argument in order to load the data from the csv file into a sentiment table'''

        try:                        
            self.folder_path_handler() 
            sentiment_file=args[0]
        
            
            with open(sentiment_file,'r') as sent_file:
                csv_reader = csv.reader(sent_file,delimiter=';')
                next(csv_reader)
                for row in csv_reader: 
                    feelings_grade=float(row[2].replace(',','.'))
                    feelings= row[0]+";"+row[3].replace(',',';')
                    
                    self.db_cursor.execute("""INSERT INTO {0} (feelings, grade)
                                               SELECT '{1}',{2}""".format(self.sentiment_table,
                                                                            feelings.encode('utf-8'),
                                                                            feelings_grade))
            
            self.logger.info('Table '+str(self.sentiment_table)+' ready and loaded')
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()
 
    def sentiment_table_importer_old(self,*args,**kwargs):
        '''this method is generally called by sentimentalizer during the sentiment analysis; 
        it needs a csv file as argument in order to load the data from the csv file into a sentiment table'''
        
        try:
            self.folder_path_handler() 
            sentiment_file=args[0]
          
            with open(sentiment_file, 'rb') as sent_file:
                next(sent_file)#skips the first line
                for row in sent_file:         
                    splitted_row=row.split(';')
                    feelings=(splitted_row[0]).encode('utf-8')+";"+(splitted_row[3]).encode('utf-8').replace(',',';')
                    feelings_grade=splitted_row[2].replace(',','.')
                        
                    self.db_cursor.execute("""INSERT INTO {0} (feelings, grade)
                                               SELECT '{1}',{2}""".format(self.sentiment_table,feelings,feelings_grade))
            
                print('Table '+str(self.sentiment_table)+' ready and loaded')
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()            
            
    def sentiment_inserter(self,*args,**kwargs):
        '''this method is called within the sentiment analysis in order to 
        update a tweet adding a grade reflecting the positivity or negativity of the tweet text'''
        try:
            tweet_id=args[0]
            sentiment_grade=args[1]
            self.db_cursor.execute("""UPDATE {0} 
                                      set sentiment_grade={2}
                                      WHERE tweet_id={1}""".format(self.tweets_table,tweet_id,sentiment_grade,))

        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

    def top_trend_inserter(self,*args,**kwargs):
        '''this method is called from within the trends hunt and inserts a 
        newly found top trend into the top_trends table; 4 arguments are provided,
        reflecting the attributes that will be inserted in the table; 
        complus_id is here used due to backwards compatibility'''
        try:
            self.db_cursor.execute("""INSERT INTO {0} (complus_id,country,region,trend,woeid)
                                        SELECT {1},'{2}','{3}', '{4}',{5}""".format(self.top_trends_table,id_maker(),args[0],args[1],args[2].replace("'","Â´"),args[3]))

        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

    def trend_inserter(self,*args,**kwargs):
        '''this method is called from within the trends hunt and inserts a 
        newly found trend into the trends table; 4 arguments are provided,
        reflecting the attributes that will be inserted in the table; 
        complus_id is here used due to backwards compatibility'''
        
        try:
            self.db_cursor.execute("""INSERT INTO {0} (complus_id,country,region,trend,ranking,woeid)
                                        SELECT {1},'{2}','{3}', '{4}',{5},{6}""".format(self.trends_table,id_maker(),args[0],args[1],args[2].replace("'","Â´"),args[3],args[4]))

        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

    def tweet_inserter(self,*args,**kwargs):
        '''this method inserts single tweet into a tweets table; it needs a tweet as argument;
        if the tweet is already present in the tweets table, the tweet will be updated instead of being inserted
        moreover, this function also properly formats the tweet attributes '''

        try:
            status=args[0]
            search_terms=args[1]
            if status.id in self.stored_tweets_ids:
                self.tweet_updater(status)
            else:
                status.text=status.text.replace("'","`")
                status.source=status.source.replace("'","`")   
                tokenized_tweet_text=status.text.replace(' ',';')
                if status.entities['user_mentions']:
                    mentions=[]
                    for mention in status.entities['user_mentions']:
                        mentions.append('@'+mention['screen_name'])
                    mentions=';'.join(mentions)
                else:
                    mentions='N/A'
                
                if status.entities['hashtags']:
                    hashtags=[]                           
                    for hashtag in status.entities['hashtags']:
                        hashtags.append('#'+hashtag['text'])                
                    hashtags=';'.join(hashtags)
                else:
                    hashtags='N/A'
                    
                if status.entities['urls']:
                    urls=[]
                    for url in status.entities['urls']:
                        urls.append(url['expanded_url'])
                    urls=';'.join(urls)
                else:
                    urls='N/A'
                if status.coordinates:
                    coordinates=str(status.coordinates['coordinates']).strip('[]')
                else: 
                    coordinates= ''
    ############################################################################################################################
                if status.retweet_count:retweetters='N/A'
                else:retweetters='N/A'                    
    ############################################################################################################################                  
                try:
                    self.db_cursor.execute("""INSERT INTO {0} (tweet_ID, author_ID, author_name, created_at, 
                        tweet_text,tokenized_tweet_text, status_lang, mentions, hashtags, urls,
                        coordinates, source,retweet_count, retweeters,
                        search_terms)
                        SELECT {1}, {2}, '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}',' {10}', '{11}' ,'{12}',{13},'{14}','{15}'
                            WHERE NOT EXISTS 
                            (SELECT Tweet_ID FROM {0} WHERE Tweet_ID='{1}')
                            """.format(self.tweets_table,
                                   status.id,
                                   status.user.id,
                                   status.user.screen_name,
                                   status.created_at,
                                   (status.text).encode('utf-8'),
                                   (tokenized_tweet_text).encode('utf-8'),
                                   status.lang, 
                                   mentions.encode('utf-8'),
                                   (hashtags).encode('utf-8'), 
                                   (urls).encode('utf-8'), 
                                   coordinates,
                                   (status.source).encode('utf-8'),
                                   status.retweet_count,
                                   retweetters,
                                   search_terms
                                   )) 
                except Exception: 
                    self.logger.error(self.tweets_table,
                                   status.id,
                                   status.user.id,
                                   status.user.screen_name,
                                   status.created_at,
                                   (status.text).encode('utf-8'), 
                                   status.lang, 
                                   mentions.encode('utf-8'),
                                   (hashtags).encode('utf-8'), 
                                   (urls).encode('utf-8'), 
                                   coordinates,
                                   (status.source).encode('utf-8'),
                                   status.retweet_count,
                                   retweetters,
                                   search_terms
                                   )
    
    
        #            print(dir(status))#for debugging
                if hasattr(self,'stored_tweets_ids'):
                    self.stored_tweets_ids.add(status.id)                                      
                    if hasattr(self,'new_tweets_ids'):
                        self.new_tweets_ids.add(status.id)    
                        if hasattr(self,'_verbose'):self.logger.info("new tweet stored: "+str(len(self.new_tweets_ids))+" total stored in "+str(self.schema)+".tweets: "+ str(len(self.stored_tweets_ids)))                                 

        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

    def tweet_updater(self,*args,**kwargs):
        '''this method updates a single tweet in a tweets table; it needs a tweet as argument;
        this method is generally called from the tweets_inserter, if the tweet is already 
        present in the tweets table the tweet attributes that could have been alterated
        in the time will be updated'''
        
        try:
            status=args[0]
            self.db_cursor.execute("""UPDATE {0} 
                SET retweet_count={2},attr_extra_1='{3}'
                    WHERE Tweet_ID={1}
                    """.format(self.tweets_table,
                           status.id,
                           status.retweet_count,
                           'tweet updated'
                           )) 
            if hasattr(self,'_verbose'):self.logger.info("tweet updated")                                 
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

    def tweet_error_updater(self,*args,**kwargs):
        '''this method is used exclusevely when a request to twitter api regarding a specific tweet
        responds with a 403 error,or 404 error; error 403 this accured only once with a 
        tweet belonging to an ultra-conservative 
        republican blond surfer-girl from California who during the last weeks has been changing 
        her privacy setting on her tweets different times; a tweet of her has been retrieved as 
        it was not protected, and a later on additional search regarding its eventual retweeters 
        caused an 403 error and an infinite loop in retweeters_hunter since the surfer-girl's timeline
        became protected in the meanwhile; 404 error is ended up with the same results,
        with the difference that in this case a tweet has been deleted from the user's timeline
        the same retweeter_hunt executed as soon as possible after retrieving 
        the tweet reduce the risk of having to use tweet_error_updater '''
        try:        
            tweet_id=args[0]
            error_code=args[1]
            self.db_cursor.execute("""UPDATE {0} 
                SET retweeters='{2}'
                    WHERE Tweet_ID={1}
                    """.format(self.tweets_table,
                           tweet_id,
                           error_code
                           )) 
        except Exception: 
            self.logger.error(format_exc())
            self.disconnector()

if __name__=="__main__":
    from connect_disconnect_ops import IO_handler

    class Generic_main(IO_handler,Postgres_inserter):
        def __init__(self,*args):
            db={'database':"twitter",
            'user':"complus", 
            'password':"JARO", 
            'host':"62.75.158.129", 
            'port':"5432"}
            
            self.db_connector(**db)
            self.basic_schema(args[0])
            self.logs()
           # self.tweet_tokenizer()
            self.node_tokenizer()
            self.edge_tokenizer()

            self.disconnector()

###################################################
    schema='martina'
###################################################
    if len(sys.argv)==1:
        pass
    elif len(sys.argv)==2:
        schema=sys.argv[1]
            
    #generic_object=Generic_main(schema)